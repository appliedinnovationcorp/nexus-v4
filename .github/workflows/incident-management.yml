name: Incident Management & On-Call

on:
  # SLO breach webhook from monitoring systems
  repository_dispatch:
    types: [slo-breach, alert-triggered, incident-created]
  
  # Manual incident creation
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'create-incident'
        type: choice
        options:
          - 'create-incident'
          - 'update-incident'
          - 'generate-postmortem'
          - 'sync-oncall'
          - 'test-integrations'
      incident_id:
        description: 'Incident ID (for update/postmortem actions)'
        required: false
        type: string
      severity:
        description: 'Incident severity (for create action)'
        required: false
        default: 'sev3'
        type: choice
        options:
          - 'sev1'
          - 'sev2'
          - 'sev3'
          - 'sev4'
      title:
        description: 'Incident title (for create action)'
        required: false
        type: string
      service:
        description: 'Affected service'
        required: false
        default: 'nexus-api'
        type: choice
        options:
          - 'nexus-api'
          - 'nexus-database'
          - 'secret-management'
          - 'nexus-frontend'
          - 'design-system'

  # Scheduled tasks
  schedule:
    # Sync on-call schedules every hour
    - cron: '0 * * * *'
    # Generate incident reports daily at 9 AM UTC
    - cron: '0 9 * * *'
    # Test integrations weekly on Sundays at 10 AM UTC
    - cron: '0 10 * * 0'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Handle SLO breach alerts
  handle-slo-breach:
    runs-on: ubuntu-latest
    name: Handle SLO Breach Alert
    if: github.event_name == 'repository_dispatch' && github.event.action == 'slo-breach'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd packages/incident-management
          pnpm install

      - name: Process SLO breach
        env:
          PAGERDUTY_API_KEY: ${{ secrets.PAGERDUTY_API_KEY }}
          PAGERDUTY_SERVICE_KEY: ${{ secrets.PAGERDUTY_SERVICE_KEY }}
          OPSGENIE_API_KEY: ${{ secrets.OPSGENIE_API_KEY }}
          OPSGENIE_TEAM_ID: ${{ secrets.OPSGENIE_TEAM_ID }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          cd packages/incident-management
          echo "=== Processing SLO Breach Alert ==="
          
          # Extract breach information from webhook payload
          SLO_ID="${{ github.event.client_payload.slo_id }}"
          SERVICE="${{ github.event.client_payload.service }}"
          BREACH_TYPE="${{ github.event.client_payload.breach_type }}"
          CURRENT_VALUE="${{ github.event.client_payload.current_value }}"
          THRESHOLD="${{ github.event.client_payload.threshold }}"
          
          echo "SLO Breach Details:"
          echo "  SLO ID: $SLO_ID"
          echo "  Service: $SERVICE"
          echo "  Breach Type: $BREACH_TYPE"
          echo "  Current Value: $CURRENT_VALUE"
          echo "  Threshold: $THRESHOLD"
          
          # Determine severity based on breach type and service tier
          SEVERITY="sev3"
          if [[ "$BREACH_TYPE" == "availability" && "$SERVICE" == "nexus-api" ]]; then
            SEVERITY="sev2"
          elif [[ "$BREACH_TYPE" == "availability" && "$SERVICE" == "secret-management" ]]; then
            SEVERITY="sev1"
          fi
          
          # Create incident
          INCIDENT_TITLE="SLO Breach: $SERVICE $BREACH_TYPE below threshold"
          INCIDENT_DESCRIPTION="SLO $SLO_ID has breached its threshold. Current value: $CURRENT_VALUE, Threshold: $THRESHOLD"
          
          echo "Creating incident with severity: $SEVERITY"
          
          # This would call the incident management system
          node -e "
          const { IncidentManager } = require('./dist/index.js');
          
          const manager = new IncidentManager({
            pagerduty: {
              apiKey: process.env.PAGERDUTY_API_KEY,
              serviceKey: process.env.PAGERDUTY_SERVICE_KEY
            },
            opsgenie: {
              apiKey: process.env.OPSGENIE_API_KEY,
              teamId: process.env.OPSGENIE_TEAM_ID
            },
            slackWebhookUrl: process.env.SLACK_WEBHOOK_URL
          });
          
          manager.createIncident({
            title: '$INCIDENT_TITLE',
            description: '$INCIDENT_DESCRIPTION',
            severity: '$SEVERITY',
            service: '$SERVICE',
            source: 'slo_breach',
            createdBy: 'github-actions',
            sloBreachIds: ['$SLO_ID']
          }).then(incident => {
            console.log('✅ Incident created:', incident.id);
            console.log('incident_id=' + incident.id);
          }).catch(error => {
            console.error('❌ Failed to create incident:', error);
            process.exit(1);
          });
          " >> $GITHUB_OUTPUT

      - name: Update GitHub issue
        uses: actions/github-script@v7
        with:
          script: |
            const sloId = '${{ github.event.client_payload.slo_id }}';
            const service = '${{ github.event.client_payload.service }}';
            
            const issueTitle = `🚨 SLO Breach: ${service} ${sloId}`;
            const issueBody = `
            # SLO Breach Alert
            
            **Service:** ${service}
            **SLO ID:** ${sloId}
            **Breach Type:** ${{ github.event.client_payload.breach_type }}
            **Current Value:** ${{ github.event.client_payload.current_value }}
            **Threshold:** ${{ github.event.client_payload.threshold }}
            **Detected At:** ${new Date().toISOString()}
            
            ## Immediate Actions Required
            
            1. **Acknowledge the incident** in PagerDuty/Opsgenie
            2. **Investigate the root cause** using monitoring dashboards
            3. **Apply mitigation** if possible
            4. **Update stakeholders** on progress
            
            ## Resources
            
            - [Service Dashboard](https://grafana.nexus.dev/d/${service}-dashboard)
            - [SLO Dashboard](https://grafana.nexus.dev/d/slo-dashboard)
            - [Runbook](https://runbooks.nexus.dev/${service})
            - [On-Call Schedule](https://pagerduty.com/schedules)
            
            ---
            *This issue was automatically created by the incident management workflow.*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['incident', 'slo-breach', service, 'urgent'],
              assignees: ['@nexus-team/sre-team']
            });

  # Create incident manually
  create-incident:
    runs-on: ubuntu-latest
    name: Create Incident
    if: github.event.inputs.action == 'create-incident'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd packages/incident-management
          pnpm install

      - name: Create incident
        env:
          PAGERDUTY_API_KEY: ${{ secrets.PAGERDUTY_API_KEY }}
          PAGERDUTY_SERVICE_KEY: ${{ secrets.PAGERDUTY_SERVICE_KEY }}
          OPSGENIE_API_KEY: ${{ secrets.OPSGENIE_API_KEY }}
          OPSGENIE_TEAM_ID: ${{ secrets.OPSGENIE_TEAM_ID }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          cd packages/incident-management
          echo "=== Creating Manual Incident ==="
          
          TITLE="${{ github.event.inputs.title || 'Manual Incident' }}"
          SEVERITY="${{ github.event.inputs.severity }}"
          SERVICE="${{ github.event.inputs.service }}"
          
          echo "Creating incident:"
          echo "  Title: $TITLE"
          echo "  Severity: $SEVERITY"
          echo "  Service: $SERVICE"
          
          # Create incident using incident management system
          node -e "
          const { IncidentManager } = require('./dist/index.js');
          
          const manager = new IncidentManager({
            pagerduty: {
              apiKey: process.env.PAGERDUTY_API_KEY,
              serviceKey: process.env.PAGERDUTY_SERVICE_KEY
            },
            opsgenie: {
              apiKey: process.env.OPSGENIE_API_KEY,
              teamId: process.env.OPSGENIE_TEAM_ID
            },
            slackWebhookUrl: process.env.SLACK_WEBHOOK_URL
          });
          
          manager.createIncident({
            title: '$TITLE',
            description: 'Manually created incident via GitHub Actions',
            severity: '$SEVERITY',
            service: '$SERVICE',
            source: 'manual',
            createdBy: '${{ github.actor }}'
          }).then(incident => {
            console.log('✅ Incident created successfully');
            console.log('Incident ID:', incident.id);
            console.log('Severity:', incident.severity);
            console.log('Service:', incident.classification.primaryService);
          }).catch(error => {
            console.error('❌ Failed to create incident:', error);
            process.exit(1);
          });
          "

  # Generate post-mortem
  generate-postmortem:
    runs-on: ubuntu-latest
    name: Generate Post-Mortem
    if: github.event.inputs.action == 'generate-postmortem'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd packages/incident-management
          pnpm install

      - name: Generate post-mortem
        run: |
          cd packages/incident-management
          echo "=== Generating Post-Mortem ==="
          
          INCIDENT_ID="${{ github.event.inputs.incident_id }}"
          
          if [ -z "$INCIDENT_ID" ]; then
            echo "❌ Incident ID is required for post-mortem generation"
            exit 1
          fi
          
          echo "Generating post-mortem for incident: $INCIDENT_ID"
          
          # Generate post-mortem document
          node scripts/generate-postmortem.js generate --incidentId "$INCIDENT_ID" --template standard --format markdown
          
          echo "✅ Post-mortem generated successfully"

      - name: Upload post-mortem artifacts
        uses: actions/upload-artifact@v4
        with:
          name: postmortem-${{ github.event.inputs.incident_id }}-${{ github.run_number }}
          path: packages/incident-management/reports/postmortems/
          retention-days: 365

      - name: Create post-mortem PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const incidentId = '${{ github.event.inputs.incident_id }}';
            const reportsDir = 'packages/incident-management/reports/postmortems';
            
            // Find the generated post-mortem file
            const files = fs.readdirSync(reportsDir).filter(f => f.includes(incidentId) && f.endsWith('.md'));
            
            if (files.length === 0) {
              console.log('No post-mortem file found');
              return;
            }
            
            const postmortemFile = files[0];
            const postmortemPath = path.join(reportsDir, postmortemFile);
            const postmortemContent = fs.readFileSync(postmortemPath, 'utf8');
            
            // Create a new branch and PR for the post-mortem
            const branchName = `postmortem/${incidentId}`;
            const prTitle = `Post-Mortem: ${incidentId}`;
            const prBody = `
            # Post-Mortem Review
            
            This PR contains the post-mortem document for incident ${incidentId}.
            
            ## Review Checklist
            
            - [ ] Timeline is accurate and complete
            - [ ] Root cause analysis is thorough
            - [ ] Action items are specific and assigned
            - [ ] Lessons learned are documented
            - [ ] All required reviewers have approved
            
            ## Next Steps
            
            1. Review the post-mortem document
            2. Provide feedback and suggestions
            3. Approve when ready for publication
            4. Merge to publish the post-mortem
            
            ---
            *This PR was automatically created by the incident management workflow.*
            `;
            
            // Note: In a real implementation, you would create the branch and PR
            // For now, we'll just create an issue to track the post-mortem
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📋 Post-Mortem Review: ${incidentId}`,
              body: prBody,
              labels: ['post-mortem', 'review-required', incidentId],
              assignees: ['@nexus-team/sre-team']
            });

  # Sync on-call schedules
  sync-oncall:
    runs-on: ubuntu-latest
    name: Sync On-Call Schedules
    if: github.event.inputs.action == 'sync-oncall' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd packages/incident-management
          pnpm install

      - name: Sync on-call schedules
        env:
          PAGERDUTY_API_KEY: ${{ secrets.PAGERDUTY_API_KEY }}
          OPSGENIE_API_KEY: ${{ secrets.OPSGENIE_API_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          cd packages/incident-management
          echo "=== Syncing On-Call Schedules ==="
          
          # Sync schedules from PagerDuty and Opsgenie
          node scripts/sync-oncall.js
          
          echo "✅ On-call schedules synchronized"

  # Test integrations
  test-integrations:
    runs-on: ubuntu-latest
    name: Test Incident Management Integrations
    if: github.event.inputs.action == 'test-integrations' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd packages/incident-management
          pnpm install

      - name: Test PagerDuty integration
        env:
          PAGERDUTY_API_KEY: ${{ secrets.PAGERDUTY_API_KEY }}
        run: |
          cd packages/incident-management
          echo "=== Testing PagerDuty Integration ==="
          
          node -e "
          const { PagerDutyProvider } = require('./dist/providers/PagerDutyProvider.js');
          
          const provider = new PagerDutyProvider({
            apiKey: process.env.PAGERDUTY_API_KEY,
            serviceKey: 'test'
          });
          
          provider.testConnection().then(result => {
            if (result) {
              console.log('✅ PagerDuty connection successful');
            } else {
              console.log('❌ PagerDuty connection failed');
              process.exit(1);
            }
          }).catch(error => {
            console.error('❌ PagerDuty test error:', error.message);
            process.exit(1);
          });
          "

      - name: Test Opsgenie integration
        env:
          OPSGENIE_API_KEY: ${{ secrets.OPSGENIE_API_KEY }}
        run: |
          cd packages/incident-management
          echo "=== Testing Opsgenie Integration ==="
          
          node -e "
          const { OpsgenieProvider } = require('./dist/providers/OpsgenieProvider.js');
          
          const provider = new OpsgenieProvider({
            apiKey: process.env.OPSGENIE_API_KEY,
            teamId: 'test'
          });
          
          provider.testConnection().then(result => {
            if (result) {
              console.log('✅ Opsgenie connection successful');
            } else {
              console.log('❌ Opsgenie connection failed');
              process.exit(1);
            }
          }).catch(error => {
            console.error('❌ Opsgenie test error:', error.message);
            process.exit(1);
          });
          "

      - name: Test Slack integration
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          cd packages/incident-management
          echo "=== Testing Slack Integration ==="
          
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"🧪 Incident management integration test - all systems operational"}' \
              "$SLACK_WEBHOOK_URL"
            
            if [ $? -eq 0 ]; then
              echo "✅ Slack webhook test successful"
            else
              echo "❌ Slack webhook test failed"
              exit 1
            fi
          else
            echo "⚠️  Slack webhook URL not configured"
          fi

  # Generate incident reports
  generate-reports:
    runs-on: ubuntu-latest
    name: Generate Incident Reports
    if: github.event_name == 'schedule' && github.event.schedule == '0 9 * * *'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd packages/incident-management
          pnpm install

      - name: Generate daily incident report
        run: |
          cd packages/incident-management
          echo "=== Generating Daily Incident Report ==="
          
          # Generate incident metrics for the last 24 hours
          node scripts/generate-postmortem.js metrics --days 1
          
          # Generate weekly report on Mondays
          if [ "$(date +%u)" -eq 1 ]; then
            echo "=== Generating Weekly Incident Report ==="
            node scripts/generate-postmortem.js metrics --days 7
          fi
          
          # Generate monthly report on the 1st of each month
          if [ "$(date +%d)" -eq 01 ]; then
            echo "=== Generating Monthly Incident Report ==="
            node scripts/generate-postmortem.js metrics --days 30
          fi
          
          echo "✅ Incident reports generated"

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: incident-reports-${{ github.run_number }}
          path: packages/incident-management/reports/
          retention-days: 90

  # Summary job
  incident-management-summary:
    runs-on: ubuntu-latest
    name: Incident Management Summary
    needs: [handle-slo-breach, create-incident, generate-postmortem, sync-oncall, test-integrations, generate-reports]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# 🚨 Incident Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          if [ "${{ needs.handle-slo-breach.result }}" == "success" ]; then
            echo "✅ **SLO Breach Handling**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.handle-slo-breach.result }}" == "skipped" ]; then
            echo "⏭️ **SLO Breach Handling**: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.handle-slo-breach.result }}" == "failure" ]; then
            echo "❌ **SLO Breach Handling**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.create-incident.result }}" == "success" ]; then
            echo "✅ **Incident Creation**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.create-incident.result }}" == "skipped" ]; then
            echo "⏭️ **Incident Creation**: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.create-incident.result }}" == "failure" ]; then
            echo "❌ **Incident Creation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.generate-postmortem.result }}" == "success" ]; then
            echo "✅ **Post-Mortem Generation**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.generate-postmortem.result }}" == "skipped" ]; then
            echo "⏭️ **Post-Mortem Generation**: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.generate-postmortem.result }}" == "failure" ]; then
            echo "❌ **Post-Mortem Generation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.sync-oncall.result }}" == "success" ]; then
            echo "✅ **On-Call Sync**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.sync-oncall.result }}" == "skipped" ]; then
            echo "⏭️ **On-Call Sync**: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.sync-oncall.result }}" == "failure" ]; then
            echo "❌ **On-Call Sync**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-integrations.result }}" == "success" ]; then
            echo "✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-integrations.result }}" == "skipped" ]; then
            echo "⏭️ **Integration Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-integrations.result }}" == "failure" ]; then
            echo "❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [📟 PagerDuty Dashboard](https://nexus.pagerduty.com)" >> $GITHUB_STEP_SUMMARY
          echo "- [🚨 Opsgenie Dashboard](https://nexus.app.opsgenie.com)" >> $GITHUB_STEP_SUMMARY
          echo "- [📊 SLO Dashboard](https://grafana.nexus.dev/d/slo-dashboard)" >> $GITHUB_STEP_SUMMARY
          echo "- [📚 Incident Runbooks](https://runbooks.nexus.dev)" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 Post-Mortem Templates](https://github.com/${{ github.repository }}/tree/main/packages/incident-management/templates)" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📅 Scheduled Tasks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **On-Call Sync**: Every hour" >> $GITHUB_STEP_SUMMARY
          echo "- **Daily Reports**: 9:00 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: Sundays at 10:00 AM UTC" >> $GITHUB_STEP_SUMMARY
