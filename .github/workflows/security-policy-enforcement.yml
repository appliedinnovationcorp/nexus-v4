name: Security Policy Enforcement

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  # Enforce security policy compliance
  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for security scans
        uses: actions/github-script@v7
        with:
          script: |
            const maxWaitTime = 20 * 60 * 1000; // 20 minutes
            const checkInterval = 30 * 1000; // 30 seconds
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request?.head?.sha || context.sha,
                check_name: 'Security Gate'
              });
              
              const securityGateRun = checkRuns.check_runs.find(run => run.name === 'Security Gate');
              
              if (securityGateRun) {
                if (securityGateRun.status === 'completed') {
                  if (securityGateRun.conclusion === 'success') {
                    console.log('‚úÖ Security gate passed');
                    return;
                  } else {
                    core.setFailed(`Security gate failed: ${securityGateRun.conclusion}`);
                    return;
                  }
                }
              }
              
              console.log('‚è≥ Waiting for security scans to complete...');
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }
            
            core.setFailed('Security scans did not complete within the timeout period');

      - name: Block merge if security issues found
        uses: actions/github-script@v7
        with:
          script: |
            // Set commit status to block merge
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request?.head?.sha || context.sha,
              state: 'success',
              target_url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`,
              description: 'All security requirements met',
              context: 'security-policy/enforcement'
            });

  # Create security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: security-policy-check
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Generate security summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## üîí Security Summary for PR #${context.issue.number}

### Security Scans Status
- **CodeQL Analysis**: Static code analysis for security vulnerabilities
- **Dependency Scan**: Check for vulnerable dependencies  
- **Container Scan**: Trivy scan for container vulnerabilities
- **Infrastructure Scan**: Terraform security best practices
- **Secret Scan**: Detection of exposed secrets
- **Docker Security**: Dockerfile security best practices

### Security Policy Requirements
‚úÖ **All high and critical vulnerabilities must be resolved**
‚úÖ **No secrets or credentials in code**
‚úÖ **Infrastructure follows security best practices**
‚úÖ **Container images are vulnerability-free**

### Next Steps
${needs.security-policy-check.result === 'success' 
  ? 'üéâ All security requirements met! This PR is approved for merge.'
  : '‚ö†Ô∏è Security issues detected. Please review and fix before merging.'}

---
*This summary is automatically generated by the security policy enforcement system.*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
