name: Infrastructure as Code

on:
  push:
    branches: [main, develop]
    paths:
      - 'infrastructure/**'
      - 'k8s/**'
      - 'docker-compose*.yml'
      - 'Dockerfile'
      - '.dockerignore'
  pull_request:
    branches: [main, develop]
    paths:
      - 'infrastructure/**'
      - 'k8s/**'
      - 'docker-compose*.yml'
      - 'Dockerfile'
      - '.dockerignore'

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0
  KUBECTL_VERSION: 1.28.0

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'infrastructure/') || contains(github.event.pull_request.changed_files, 'infrastructure/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Terraform Format Check
        run: |
          cd infrastructure
          terraform fmt -check -recursive
          
      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init -backend=false
          
      - name: Terraform Validate
        run: |
          cd infrastructure
          terraform validate
          
      - name: Terraform Plan (Dry Run)
        run: |
          cd infrastructure
          terraform plan -out=tfplan
          
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infrastructure/tfplan
          retention-days: 7

  kubernetes-validate:
    name: Kubernetes Manifests Validation
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'k8s/') || contains(github.event.pull_request.changed_files, 'k8s/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}
          
      - name: Validate Kubernetes Manifests
        run: |
          for file in k8s/*.yaml k8s/**/*.yaml; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              kubectl apply --dry-run=client --validate=true -f "$file"
            fi
          done
          
      - name: Kubeval Validation
        run: |
          # Install kubeval
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin
          
          # Validate all Kubernetes manifests
          find k8s -name "*.yaml" -exec kubeval {} \;

  docker-security-scan:
    name: Docker Security Scanning
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'Dockerfile') || contains(github.event.pull_request.changed_files, 'Dockerfile')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker Image
        run: |
          docker build -t nexus-app:test .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nexus-app:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security

  infrastructure-cost-estimation:
    name: Infrastructure Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.changed_files, 'infrastructure/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          
      - name: Generate Infracost cost estimate
        run: |
          cd infrastructure
          infracost breakdown --path . --format json --out-file infracost.json
          
      - name: Post cost estimate to PR
        uses: infracost/actions/comment@v1
        with:
          path: infrastructure/infracost.json
          behavior: update

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [terraform-validate, kubernetes-validate]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init
          
      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply -auto-approve
          
      - name: Update Kubernetes Cluster
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name nexus-cluster
          kubectl apply -f k8s/
          
      - name: Notify Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
