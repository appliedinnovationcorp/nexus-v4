name: Staging Deployment

on:
  push:
    branches: [ develop, staging ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  TERRAFORM_VERSION: 1.6.0
  NODE_VERSION: 18

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

      - name: Run unit tests
        run: pnpm test

      - name: Build applications
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist
            packages/*/dist
          retention-days: 7

  # Deploy infrastructure to staging
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    environment: staging
    outputs:
      cluster-name: ${{ steps.terraform.outputs.cluster-name }}
      alb-dns: ${{ steps.terraform.outputs.alb-dns }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: infrastructure/terraform/environments/staging
        run: terraform init

      - name: Terraform Validate
        working-directory: infrastructure/terraform/environments/staging
        run: terraform validate

      - name: Terraform Plan
        working-directory: infrastructure/terraform/environments/staging
        run: terraform plan -out=staging.tfplan

      - name: Terraform Apply
        working-directory: infrastructure/terraform/environments/staging
        run: terraform apply -auto-approve staging.tfplan

      - name: Get Terraform Outputs
        id: terraform
        working-directory: infrastructure/terraform/environments/staging
        run: |
          echo "cluster-name=$(terraform output -raw cluster_id)" >> $GITHUB_OUTPUT
          echo "alb-dns=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT

  # Build and push Docker images
  build-and-push-images:
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-infrastructure]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          # Build and push main application image
          docker build -t $ECR_REGISTRY/nexus-workspace:$IMAGE_TAG .
          docker push $ECR_REGISTRY/nexus-workspace:$IMAGE_TAG
          
          # Tag as latest staging
          docker tag $ECR_REGISTRY/nexus-workspace:$IMAGE_TAG $ECR_REGISTRY/nexus-workspace:staging-latest
          docker push $ECR_REGISTRY/nexus-workspace:staging-latest

  # Deploy applications to staging
  deploy-applications:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push-images]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ needs.deploy-infrastructure.outputs.cluster-name }}

      - name: Deploy to Kubernetes
        env:
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          # Replace image tags in Kubernetes manifests
          if [ -d "k8s/staging" ]; then
            find k8s/staging -name "*.yaml" -o -name "*.yml" | xargs sed -i "s|IMAGE_TAG|$IMAGE_TAG|g"
            kubectl apply -f k8s/staging/
          fi

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/nexus-workspace --timeout=300s

      - name: Run database migrations
        run: |
          # Add your migration commands here
          echo "Running database migrations..."
          # kubectl exec -it deployment/nexus-workspace -- npm run migrate

  # Run E2E tests against staging
  e2e-tests:
    runs-on: ubuntu-latest
    needs: deploy-applications
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run E2E tests against staging
        env:
          BASE_URL: http://${{ needs.deploy-infrastructure.outputs.alb-dns }}
          ENVIRONMENT: staging
        run: pnpm test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Smoke tests and health checks
  smoke-tests:
    runs-on: ubuntu-latest
    needs: [deploy-applications, e2e-tests]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    steps:
      - name: Health check
        env:
          ALB_DNS: ${{ needs.deploy-infrastructure.outputs.alb-dns }}
        run: |
          echo "Running health checks against staging environment..."
          
          # Wait for services to be ready
          sleep 30
          
          # Health check endpoint
          curl -f "http://${ALB_DNS}/health" || exit 1
          
          # API endpoint check
          curl -f "http://${ALB_DNS}/api/health" || exit 1
          
          echo "‚úÖ All health checks passed!"

      - name: Performance baseline
        env:
          ALB_DNS: ${{ needs.deploy-infrastructure.outputs.alb-dns }}
        run: |
          echo "Running performance baseline tests..."
          
          # Simple load test (you might want to use a proper tool like k6)
          for i in {1..10}; do
            curl -w "@curl-format.txt" -o /dev/null -s "http://${ALB_DNS}/" || exit 1
          done
          
          echo "‚úÖ Performance baseline completed!"

  # Notify about staging deployment
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-applications, e2e-tests, smoke-tests]
    if: always() && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging')
    steps:
      - name: Notify deployment status
        env:
          ALB_DNS: ${{ needs.deploy-infrastructure.outputs.alb-dns }}
          DEPLOYMENT_STATUS: ${{ needs.smoke-tests.result }}
        run: |
          if [ "$DEPLOYMENT_STATUS" == "success" ]; then
            echo "üéâ Staging deployment successful!"
            echo "Environment URL: http://${ALB_DNS}"
            echo "All tests passed. Ready for production deployment."
          else
            echo "‚ùå Staging deployment failed!"
            echo "Please check the logs and fix issues before proceeding."
            exit 1
          fi
