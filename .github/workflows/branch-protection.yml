name: Branch Protection Enforcement

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Enforce security requirements before allowing merge
  security-requirements:
    name: Security Requirements Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security scan completion
        uses: actions/github-script@v7
        with:
          script: |
            // Get the latest workflow runs for this PR
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'security-scanning.yml',
              head_sha: context.payload.pull_request.head.sha
            });
            
            if (workflowRuns.total_count === 0) {
              core.setFailed('Security scanning workflow has not run for this PR. Please wait for security scans to complete.');
              return;
            }
            
            const latestRun = workflowRuns.workflow_runs[0];
            
            if (latestRun.status !== 'completed') {
              core.setFailed('Security scanning is still in progress. Please wait for completion before merging.');
              return;
            }
            
            if (latestRun.conclusion !== 'success') {
              core.setFailed('Security scanning failed. Please fix all security issues before merging.');
              return;
            }
            
            console.log('✅ Security scanning completed successfully');

      - name: Verify staging deployment (for main branch PRs)
        if: github.base_ref == 'main'
        uses: actions/github-script@v7
        with:
          script: |
            // For PRs to main, ensure staging deployment exists and is healthy
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'staging-deployment.yml',
              branch: 'develop'
            });
            
            if (workflowRuns.total_count === 0) {
              core.setFailed('No staging deployment found. Code must be deployed to staging before production.');
              return;
            }
            
            const latestStagingRun = workflowRuns.workflow_runs[0];
            const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            
            if (new Date(latestStagingRun.created_at) < oneDayAgo) {
              core.setFailed('Staging deployment is older than 24 hours. Please deploy to staging first.');
              return;
            }
            
            if (latestStagingRun.conclusion !== 'success') {
              core.setFailed('Latest staging deployment failed. Please fix staging issues before production deployment.');
              return;
            }
            
            console.log('✅ Recent successful staging deployment found');

  # Check code quality requirements
  quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: |
          echo "## Code Quality Results" >> $GITHUB_STEP_SUMMARY
          
          # Run ESLint and capture results
          pnpm lint 2>&1 | tee lint-results.txt || LINT_EXIT_CODE=$?
          
          if [ "${LINT_EXIT_CODE:-0}" -ne 0 ]; then
            echo "❌ Linting failed" >> $GITHUB_STEP_SUMMARY
            echo "::error::Code quality checks failed. Please fix linting errors."
            exit 1
          else
            echo "✅ Linting passed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run type checking
        run: |
          pnpm type-check 2>&1 | tee typecheck-results.txt || TYPECHECK_EXIT_CODE=$?
          
          if [ "${TYPECHECK_EXIT_CODE:-0}" -ne 0 ]; then
            echo "❌ Type checking failed" >> $GITHUB_STEP_SUMMARY
            echo "::error::Type checking failed. Please fix TypeScript errors."
            exit 1
          else
            echo "✅ Type checking passed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run unit tests with coverage
        run: |
          pnpm test --coverage 2>&1 | tee test-results.txt || TEST_EXIT_CODE=$?
          
          if [ "${TEST_EXIT_CODE:-0}" -ne 0 ]; then
            echo "❌ Unit tests failed" >> $GITHUB_STEP_SUMMARY
            echo "::error::Unit tests failed. Please fix failing tests."
            exit 1
          else
            echo "✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY
          fi

  # Final merge readiness check
  merge-readiness:
    name: Merge Readiness Check
    runs-on: ubuntu-latest
    needs: [security-requirements, quality-gate]
    
    steps:
      - name: All checks passed
        run: |
          echo "## 🎉 Merge Readiness: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All required checks have passed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scanning completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality requirements met" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All tests passing" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.base_ref }}" = "main" ]; then
            echo "- ✅ Staging deployment verified" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This PR is ready to merge! 🚀" >> $GITHUB_STEP_SUMMARY

      - name: Update PR status
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🔒 Security & Quality Gate: PASSED ✅

All security and quality checks have completed successfully:

- ✅ **Security Scanning**: No critical vulnerabilities found
- ✅ **Code Quality**: Linting and type checking passed  
- ✅ **Unit Tests**: All tests passing with coverage
${context.payload.pull_request.base.ref === 'main' ? '- ✅ **Staging Verification**: Recent successful deployment confirmed' : ''}

This PR meets all requirements and is **ready to merge**! 🚀

---
*Automated security and quality gate enforcement*`;

            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('Security & Quality Gate') && 
              comment.user.type === 'Bot'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
