name: Secret Migration to Vault

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to migrate secrets for'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      dry_run:
        description: 'Perform a dry run without actually migrating secrets'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: us-west-2

jobs:
  migrate-secrets:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name nexus-workspace-${{ github.event.inputs.environment }}

      - name: Install Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault

      - name: Setup Vault connection
        run: |
          # Port forward to Vault
          kubectl port-forward svc/vault 8200:8200 -n vault &
          sleep 10
          
          # Set Vault address
          echo "VAULT_ADDR=http://localhost:8200" >> $GITHUB_ENV
          
          # Get Vault token from Kubernetes secret
          VAULT_TOKEN=$(kubectl get secret vault-keys -n vault -o jsonpath='{.data.root-token}' | base64 -d)
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: Verify Vault connection
        run: |
          vault status
          vault auth list

      - name: Migrate GitHub Secrets to Vault
        run: |
          echo "🔄 Migrating GitHub Secrets to Vault..."
          
          # Function to set secret in Vault
          set_vault_secret() {
            local path=$1
            local key=$2
            local value=$3
            
            if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              echo "[DRY RUN] Would set: $path/$key"
            else
              echo "Setting: $path/$key"
              vault kv put secret/nexus-workspace/${{ github.event.inputs.environment }}/$path $key="$value"
            fi
          }
          
          # Migrate database secrets
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            set_vault_secret "database" "url" "${{ secrets.DATABASE_URL }}"
          fi
          
          if [ -n "${{ secrets.DATABASE_PASSWORD }}" ]; then
            set_vault_secret "database" "password" "${{ secrets.DATABASE_PASSWORD }}"
          fi
          
          # Migrate API keys
          if [ -n "${{ secrets.DATADOG_API_KEY }}" ]; then
            set_vault_secret "external/datadog" "api-key" "${{ secrets.DATADOG_API_KEY }}"
          fi
          
          if [ -n "${{ secrets.STRIPE_SECRET_KEY }}" ]; then
            set_vault_secret "external/stripe" "secret-key" "${{ secrets.STRIPE_SECRET_KEY }}"
          fi
          
          if [ -n "${{ secrets.SENDGRID_API_KEY }}" ]; then
            set_vault_secret "external/sendgrid" "api-key" "${{ secrets.SENDGRID_API_KEY }}"
          fi
          
          if [ -n "${{ secrets.LAUNCHDARKLY_SDK_KEY }}" ]; then
            set_vault_secret "external/launchdarkly" "sdk-key" "${{ secrets.LAUNCHDARKLY_SDK_KEY }}"
          fi
          
          # Migrate authentication secrets
          if [ -n "${{ secrets.JWT_SECRET }}" ]; then
            set_vault_secret "auth" "jwt-secret" "${{ secrets.JWT_SECRET }}"
          fi
          
          if [ -n "${{ secrets.JWT_REFRESH_SECRET }}" ]; then
            set_vault_secret "auth" "jwt-refresh-secret" "${{ secrets.JWT_REFRESH_SECRET }}"
          fi
          
          if [ -n "${{ secrets.SESSION_SECRET }}" ]; then
            set_vault_secret "auth" "session-secret" "${{ secrets.SESSION_SECRET }}"
          fi
          
          if [ -n "${{ secrets.OAUTH_CLIENT_SECRET }}" ]; then
            set_vault_secret "auth/oauth" "client-secret" "${{ secrets.OAUTH_CLIENT_SECRET }}"
          fi
          
          # Migrate encryption keys
          if [ -n "${{ secrets.ENCRYPTION_KEY }}" ]; then
            set_vault_secret "encryption" "primary-key" "${{ secrets.ENCRYPTION_KEY }}"
          fi
          
          # Migrate Redis secrets
          if [ -n "${{ secrets.REDIS_PASSWORD }}" ]; then
            set_vault_secret "redis" "password" "${{ secrets.REDIS_PASSWORD }}"
          fi
          
          # Migrate webhook secrets
          if [ -n "${{ secrets.GITHUB_WEBHOOK_SECRET }}" ]; then
            set_vault_secret "webhooks/github" "secret" "${{ secrets.GITHUB_WEBHOOK_SECRET }}"
          fi
          
          if [ -n "${{ secrets.STRIPE_WEBHOOK_SECRET }}" ]; then
            set_vault_secret "webhooks/stripe" "secret" "${{ secrets.STRIPE_WEBHOOK_SECRET }}"
          fi
          
          # Migrate monitoring secrets
          if [ -n "${{ secrets.GRAFANA_ADMIN_PASSWORD }}" ]; then
            set_vault_secret "monitoring/grafana" "admin-password" "${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
          fi
          
          if [ -n "${{ secrets.PROMETHEUS_PASSWORD }}" ]; then
            set_vault_secret "monitoring/prometheus" "password" "${{ secrets.PROMETHEUS_PASSWORD }}"
          fi

      - name: Migrate Kubernetes Secrets to Vault
        run: |
          echo "🔄 Migrating Kubernetes Secrets to Vault..."
          
          # Function to migrate a Kubernetes secret
          migrate_k8s_secret() {
            local secret_name=$1
            local vault_path=$2
            local namespace=${3:-default}
            
            if kubectl get secret $secret_name -n $namespace &>/dev/null; then
              echo "Migrating K8s secret: $secret_name -> $vault_path"
              
              if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
                echo "[DRY RUN] Would migrate: $secret_name"
                kubectl get secret $secret_name -n $namespace -o jsonpath='{.data}' | jq -r 'keys[]' | while read key; do
                  echo "[DRY RUN] Would set: $vault_path/$key"
                done
              else
                kubectl get secret $secret_name -n $namespace -o json | \
                jq -r '.data | to_entries[] | "\(.key)=\(.value | @base64d)"' | \
                while IFS='=' read -r key value; do
                  vault kv put secret/nexus-workspace/${{ github.event.inputs.environment }}/$vault_path $key="$value"
                done
              fi
            else
              echo "K8s secret $secret_name not found in namespace $namespace"
            fi
          }
          
          # Migrate common Kubernetes secrets
          migrate_k8s_secret "database-secret" "database"
          migrate_k8s_secret "redis-secret" "redis"
          migrate_k8s_secret "api-keys" "external"
          migrate_k8s_secret "ssl-certs" "ssl"
          migrate_k8s_secret "monitoring-secrets" "monitoring"

      - name: Verify migrated secrets
        run: |
          echo "🔍 Verifying migrated secrets..."
          
          # List all secrets in Vault
          echo "Secrets in Vault:"
          vault kv list secret/nexus-workspace/${{ github.event.inputs.environment }}/ || echo "No secrets found"
          
          # Check specific critical secrets
          check_secret() {
            local path=$1
            if vault kv get secret/nexus-workspace/${{ github.event.inputs.environment }}/$path &>/dev/null; then
              echo "✅ $path exists in Vault"
            else
              echo "❌ $path missing in Vault"
            fi
          }
          
          check_secret "database"
          check_secret "auth"
          check_secret "encryption"
          check_secret "external/datadog"

      - name: Update application configuration
        if: github.event.inputs.dry_run == 'false'
        run: |
          echo "⚙️ Updating application configuration..."
          
          # Update ConfigMap to use Vault
          kubectl patch configmap secret-management-config -n default --type merge -p '{
            "data": {
              "SECRET_MANAGER_PROVIDER": "vault",
              "VAULT_ENDPOINT": "http://vault.vault.svc.cluster.local:8200",
              "VAULT_AUTH_METHOD": "kubernetes",
              "VAULT_KUBERNETES_ROLE": "nexus-workspace"
            }
          }'
          
          echo "✅ Application configuration updated to use Vault"

      - name: Test secret retrieval
        if: github.event.inputs.dry_run == 'false'
        run: |
          echo "🧪 Testing secret retrieval..."
          
          # Test retrieving a secret
          if vault kv get -field=url secret/nexus-workspace/${{ github.event.inputs.environment }}/database &>/dev/null; then
            echo "✅ Successfully retrieved database URL from Vault"
          else
            echo "❌ Failed to retrieve database URL from Vault"
          fi

      - name: Generate migration report
        run: |
          echo "📊 Generating migration report..."
          
          REPORT_FILE="secret-migration-report-${{ github.event.inputs.environment }}-$(date +%Y%m%d-%H%M%S).md"
          
          cat > $REPORT_FILE << EOF
          # Secret Migration Report
          
          **Environment**: ${{ github.event.inputs.environment }}
          **Date**: $(date)
          **Dry Run**: ${{ github.event.inputs.dry_run }}
          
          ## Migration Summary
          
          ### GitHub Secrets Migrated
          - Database secrets (URL, password)
          - API keys (Datadog, Stripe, SendGrid, LaunchDarkly)
          - Authentication secrets (JWT, session, OAuth)
          - Encryption keys
          - Redis secrets
          - Webhook secrets
          - Monitoring secrets
          
          ### Kubernetes Secrets Migrated
          - database-secret
          - redis-secret
          - api-keys
          - ssl-certs
          - monitoring-secrets
          
          ### Vault Configuration
          - Provider: HashiCorp Vault
          - Authentication: Kubernetes service account
          - Mount path: secret/nexus-workspace/${{ github.event.inputs.environment }}/
          
          ### Next Steps
          1. Verify all applications can retrieve secrets from Vault
          2. Update CI/CD pipelines to remove GitHub secrets
          3. Revoke old secrets after successful migration
          4. Set up secret rotation schedules
          5. Configure monitoring and alerting for Vault
          
          EOF
          
          echo "📄 Migration report generated: $REPORT_FILE"

      - name: Upload migration report
        uses: actions/upload-artifact@v4
        with:
          name: secret-migration-report-${{ github.event.inputs.environment }}
          path: secret-migration-report-*.md
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          # Kill port forward
          pkill -f "kubectl port-forward" || true
