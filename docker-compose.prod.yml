version: '3.8'

# =============================================================================
# Production Docker Compose Configuration
# =============================================================================
# This configuration runs the containerized applications in production mode
# with proper networking, volumes, and security configurations.

services:
  # =============================================================================
  # Frontend Application (Next.js)
  # =============================================================================
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      target: runner
      args:
        NODE_VERSION: 20
        ALPINE_VERSION: 3.19
    image: nexus/frontend:latest
    container_name: nexus-frontend-prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001/api}
      - PORT=3000
      - HOSTNAME=0.0.0.0
    networks:
      - nexus-app-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/.next/cache:noexec,nosuid,size=100m

  # =============================================================================
  # Backend Application (NestJS)
  # =============================================================================
  backend:
    build:
      context: .
      dockerfile: services/backend/Dockerfile
      target: runner
      args:
        NODE_VERSION: 20
        ALPINE_VERSION: 3.19
    image: nexus/backend:latest
    container_name: nexus-backend-prod
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOSTNAME=0.0.0.0
      - DATABASE_URL=${DATABASE_URL}
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
    volumes:
      - backend-logs:/app/logs
      - backend-uploads:/app/uploads
    networks:
      - nexus-app-network
      - nexus-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # =============================================================================
  # Reverse Proxy (Nginx)
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: nexus-nginx-prod
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
      - ssl-certs:/etc/ssl/certs:ro
    networks:
      - nexus-app-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Database Services (from existing docker-compose.yml)
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: nexus-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nexus_prod}
      POSTGRES_USER: ${POSTGRES_USER:-nexus_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-backups:/backups
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nexus_user} -d ${POSTGRES_DB:-nexus_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  mongodb:
    image: mongo:7.0
    container_name: nexus-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-nexus_nosql}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - mongodb-backups:/backups
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7.2-alpine
    container_name: nexus-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres-data:
    driver: local
  postgres-backups:
    driver: local
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  mongodb-backups:
    driver: local
  redis-data:
    driver: local
  backend-logs:
    driver: local
  backend-uploads:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  ssl-certs:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  nexus-app-network:
    driver: bridge
    name: nexus-app-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
  nexus-network:
    driver: bridge
    name: nexus-network
    ipam:
      config:
        - subnet: 172.21.0.0/16
