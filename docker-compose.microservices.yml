version: '3.8'

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: nexus-postgres
    environment:
      POSTGRES_DB: nexus
      POSTGRES_USER: nexus
      POSTGRES_PASSWORD: nexus_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Microservices
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: nexus-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - API_GATEWAY_PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - BACKEND_SERVICE_URL=http://backend:3001
      - ANALYTICS_SERVICE_URL=http://analytics:3003
      - NOTIFICATION_SERVICE_URL=http://notification:3004
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:3002
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./services/backend
      dockerfile: Dockerfile
    container_name: nexus-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://nexus:nexus_password@postgres:5432/nexus
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key
      - JWT_EXPIRES_IN=24h
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./services/backend/prisma:/app/prisma

  analytics:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: nexus-analytics
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - ANALYTICS_HTTP_PORT=3003
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nexus:nexus_password@postgres:5432/nexus
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: nexus-notification
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nexus:nexus_password@postgres:5432/nexus
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  copilot-demo:
    build:
      context: ./apps/copilot-demo
      dockerfile: Dockerfile
    container_name: nexus-copilot-demo
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - API_GATEWAY_URL=http://api-gateway:3000
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Additional Microservices
  file-storage:
    build:
      context: ./services/file-storage
      dockerfile: Dockerfile
    container_name: nexus-file-storage
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - FILE_STORAGE_PORT=3006
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - CDN_URL=${CDN_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  iam:
    build:
      context: ./services/iam
      dockerfile: Dockerfile
    container_name: nexus-iam
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - IAM_PORT=3007
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment:
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    container_name: nexus-payment
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=development
      - PAYMENT_PORT=3008
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  search:
    build:
      context: ./services/search
      dockerfile: Dockerfile
    container_name: nexus-search
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=development
      - SEARCH_PORT=3009
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  email:
    build:
      context: ./services/email
      dockerfile: Dockerfile
    container_name: nexus-email
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=development
      - EMAIL_PORT=3010
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mobile-api:
    build:
      context: ./services/mobile-api
      dockerfile: Dockerfile
    container_name: nexus-mobile-api
    ports:
      - "3011:3011"
    environment:
      - NODE_ENV=development
      - MOBILE_API_PORT=3011
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-ml:
    build:
      context: ./services/ai-ml
      dockerfile: Dockerfile
    container_name: nexus-ai-ml
    ports:
      - "3012:3012"
    environment:
      - NODE_ENV=development
      - AI_ML_PORT=3012
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3012/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  advanced-reporting:
    build:
      context: ./services/advanced-reporting
      dockerfile: Dockerfile
    container_name: nexus-advanced-reporting
    ports:
      - "3013:3013"
    environment:
      - NODE_ENV=development
      - REPORTING_PORT=3013
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3013/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: nexus-frontend
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3000
      - NEXT_PUBLIC_WS_URL=ws://localhost:3000
    depends_on:
      api-gateway:
        condition: service_healthy

  # Monitoring and Observability
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: nexus-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: nexus-grafana
    ports:
      - "3006:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: nexus-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Message Queue UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: nexus-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis

  # Database Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nexus-pgadmin
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@nexus.dev
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:

networks:
  default:
    name: nexus-network
    driver: bridge
